<TRANSLATION_UNIT> ::= <TRANSLATION_UNIT> <EXTERNAL_DECLARATION>
		| <EXTERNAL_DECLARATION>
		;

<PRIMARY_EXPRESSION> ::= IDENTIFIER
		| CONSTANT
		| STRING_LITERAL
		| P_OPEN <EXPRESSION> P_CLOSE
		;

<POSTFIX_EXPRESSION> ::= <PRIMARY_EXPRESSION>
		| <POSTFIX_EXPRESSION> B_OPEN <EXPRESSION> B_CLOSE
		| <POSTFIX_EXPRESSION> P_OPEN P_CLOSE
		| <POSTFIX_EXPRESSION> P_OPEN <ARGUMENT_EXPRESSION_LIST> P_CLOSE
		| <POSTFIX_EXPRESSION> DOT IDENTIFIER
		| <POSTFIX_EXPRESSION> PTR_OP IDENTIFIER
		| <POSTFIX_EXPRESSION> INC_OP
		| <POSTFIX_EXPRESSION> DEC_OP
		;

<ARGUMENT_EXPRESSION_LIST> ::= <ASSIGNMENT_EXPRESSION>
		| <ARGUMENT_EXPRESSION_LIST> COMMA <ASSIGNMENT_EXPRESSION>
		;

<UNARY_EXPRESSION> ::= <POSTFIX_EXPRESSION>
		| INC_OP <UNARY_EXPRESSION>
		| DEC_OP <UNARY_EXPRESSION>
		| <UNARY_OPERATOR> <CAST_EXPRESSION>
		| SIZEOF <UNARY_EXPRESSION>
		| SIZEOF P_OPEN <TYPE_NAME> P_CLOSE
		;

<UNARY_OPERATOR> ::= AND
		| MUL
		| PLUS_SIG
		| LESS_SIG
		| NEG
		| NOT
		;

<CAST_EXPRESSION> ::= <UNARY_EXPRESSION>
		| P_OPEN <TYPE_NAME> P_CLOSE <CAST_EXPRESSION>
		;

<MULTIPLICATIVE_EXPRESSION> ::= <CAST_EXPRESSION>
		| <MULTIPLICATIVE_EXPRESSION> MUL <CAST_EXPRESSION>
		| <MULTIPLICATIVE_EXPRESSION> DIV <CAST_EXPRESSION>
		| <MULTIPLICATIVE_EXPRESSION> MOD <CAST_EXPRESSION>
		;

<ADDITIVE_EXPRESSION> ::= <MULTIPLICATIVE_EXPRESSION>
		| <ADDITIVE_EXPRESSION> PLUS_SIG <MULTIPLICATIVE_EXPRESSION>
		| <ADDITIVE_EXPRESSION> LESS_SIG <MULTIPLICATIVE_EXPRESSION>
		;

<SHIFT_EXPRESSION> ::= <ADDITIVE_EXPRESSION>
		| <SHIFT_EXPRESSION> LEFT_OP <ADDITIVE_EXPRESSION>
		| <SHIFT_EXPRESSION> RIGHT_OP <ADDITIVE_EXPRESSION>
		;

<RELATIONAL_EXPRESSION> ::= <SHIFT_EXPRESSION>
		| <RELATIONAL_EXPRESSION> LESS <SHIFT_EXPRESSION>
		| <RELATIONAL_EXPRESSION> GREATER <SHIFT_EXPRESSION>
		| <RELATIONAL_EXPRESSION> LE_OP <SHIFT_EXPRESSION>
		| <RELATIONAL_EXPRESSION> GE_OP <SHIFT_EXPRESSION>
		;

<EQUALITY_EXPRESSION> ::= <RELATIONAL_EXPRESSION>
		| <EQUALITY_EXPRESSION> EQ_OP <RELATIONAL_EXPRESSION>
		| <EQUALITY_EXPRESSION> NE_OP <RELATIONAL_EXPRESSION>
		;

<AND_EXPRESSION> ::= <EQUALITY_EXPRESSION>
		| <AND_EXPRESSION> AND <EQUALITY_EXPRESSION>
		;

<EXCLUSIVE_OR_EXPRESSION> ::= <AND_EXPRESSION>
		| <EXCLUSIVE_OR_EXPRESSION> XOR <AND_EXPRESSION>
		;

<INCLUSIVE_OR_EXPRESSION> ::= <EXCLUSIVE_OR_EXPRESSION>
		| <INCLUSIVE_OR_EXPRESSION> OR <EXCLUSIVE_OR_EXPRESSION>
		;

<LOGICAL_AND_EXPRESSION> ::= <INCLUSIVE_OR_EXPRESSION>
		| <LOGICAL_AND_EXPRESSION> AND_OP <INCLUSIVE_OR_EXPRESSION>
		;

<LOGICAL_OR_EXPRESSION> ::= <LOGICAL_AND_EXPRESSION>
		| <LOGICAL_OR_EXPRESSION> OR_OP <LOGICAL_AND_EXPRESSION>
		;

<CONDITIONAL_EXPRESSION> ::= <LOGICAL_OR_EXPRESSION>
		| <LOGICAL_OR_EXPRESSION> QUESTION <EXPRESSION> COLUMN <CONDITIONAL_EXPRESSION>
		;

<ASSIGNMENT_EXPRESSION> ::= <CONDITIONAL_EXPRESSION>
		| <UNARY_EXPRESSION> <ASSIGNMENT_OPERATOR> <ASSIGNMENT_EXPRESSION>
		;

<ASSIGNMENT_OPERATOR> ::= EQ
		| MUL_ASSIGN
		| DIV_ASSIGN
		| MOD_ASSIGN
		| ADD_ASSIGN
		| SUB_ASSIGN
		| LEFT_ASSIGN
		| RIGHT_ASSIGN
		| AND_ASSIGN
		| XOR_ASSIGN
		| OR_ASSIGN
		;

<EXPRESSION> ::= <ASSIGNMENT_EXPRESSION>
		| <EXPRESSION> COMMA <ASSIGNMENT_EXPRESSION>
		;

<CONSTANT_EXPRESSION> ::= <CONDITIONAL_EXPRESSION>;

<DECLARATION> ::= <DECLARATION_SPECIFIERS> INST_END
		| <DECLARATION_SPECIFIERS> <INIT_DECLARATOR_LIST> INST_END
		;

<DECLARATION_SPECIFIERS> ::= <STORAGE_CLASS_SPECIFIER>
		| <STORAGE_CLASS_SPECIFIER> <DECLARATION_SPECIFIERS>
		| <TYPE_SPECIFIER>
		| <TYPE_SPECIFIER> <DECLARATION_SPECIFIERS>
		| <TYPE_QUALIFIER>
		| <TYPE_QUALIFIER> <DECLARATION_SPECIFIERS>
		;

<INIT_DECLARATOR_LIST> ::= <INIT_DECLARATOR>
		| <INIT_DECLARATOR_LIST> COMMA <INIT_DECLARATOR>
		;

<INIT_DECLARATOR> ::= <DECLARATOR>
		| <DECLARATOR> EQ <INITIALIZER>
		;

<STORAGE_CLASS_SPECIFIER> ::= TYPEDEF
		| EXTERN
		| STATIC
		| AUTO
		| REGISTER
		;

<TYPE_SPECIFIER> ::= VOID
		| CHAR
		| SHORT
		| INT
		| LONG
		| FLOAT
		| DOUBLE
		| SIGNED
		| UNSIGNED
		| <STRUCT_OR_UNION_SPECIFIER>
		| <ENUM_SPECIFIER>
		| TYPE_NAME
		;

<STRUCT_OR_UNION_SPECIFIER> ::= <STRUCT_OR_UNION> IDENTIFIER BEGIN <STRUCT_DECLARATION_LIST> END
		| <STRUCT_OR_UNION> BEGIN <STRUCT_DECLARATION_LIST> END
		| <STRUCT_OR_UNION> IDENTIFIER
		;

<STRUCT_OR_UNION> ::= STRUCT
		| UNION
		;

<STRUCT_DECLARATION_LIST> ::= <STRUCT_DECLARATION>
		| <STRUCT_DECLARATION_LIST> <STRUCT_DECLARATION>
		;

<STRUCT_DECLARATION> ::= <SPECIFIER_QUALIFIER_LIST> <STRUCT_DECLARATOR_LIST> INST_END;

<SPECIFIER_QUALIFIER_LIST> ::= <TYPE_SPECIFIER> <SPECIFIER_QUALIFIER_LIST>
		| <TYPE_SPECIFIER>
		| <TYPE_QUALIFIER> <SPECIFIER_QUALIFIER_LIST>
		| <TYPE_QUALIFIER>
		;

<STRUCT_DECLARATOR_LIST> ::= <STRUCT_DECLARATOR>
		| <STRUCT_DECLARATOR_LIST> COMMA <STRUCT_DECLARATOR>
		;

<STRUCT_DECLARATOR> ::= <DECLARATOR>
		| COLUMN <CONSTANT_EXPRESSION>
		| <DECLARATOR> COLUMN <CONSTANT_EXPRESSION>
		;

<ENUM_SPECIFIER> ::= ENUM BEGIN <ENUMERATOR_LIST> END
		| ENUM IDENTIFIER BEGIN <ENUMERATOR_LIST> END
		| ENUM IDENTIFIER
		;

<ENUMERATOR_LIST> ::= <ENUMERATOR>
		| <ENUMERATOR_LIST> COMMA <ENUMERATOR>
		;

<ENUMERATOR> ::= IDENTIFIER
		| IDENTIFIER EQ <CONSTANT_EXPRESSION>
		;

<TYPE_QUALIFIER> ::= CONST
		| VOLATILE
		;

<DECLARATOR> ::= <POINTER> <DIRECT_DECLARATOR>
		| <DIRECT_DECLARATOR>
		;

<DIRECT_DECLARATOR> ::= IDENTIFIER
		| P_OPEN <DECLARATOR> P_CLOSE
		| <DIRECT_DECLARATOR> B_OPEN <CONSTANT_EXPRESSION> B_CLOSE
		| <DIRECT_DECLARATOR> B_OPEN B_CLOSE
		| <DIRECT_DECLARATOR> P_OPEN <PARAMETER_TYPE_LIST> P_CLOSE
		| <DIRECT_DECLARATOR> P_OPEN <IDENTIFIER_LIST> P_CLOSE
		| <DIRECT_DECLARATOR> P_OPEN P_CLOSE
		;

<POINTER> ::= MUL
		| MUL <TYPE_QUALIFIER_LIST>
		| MUL <POINTER>
		| MUL <TYPE_QUALIFIER_LIST> <POINTER>
		;

<TYPE_QUALIFIER_LIST> ::= <TYPE_QUALIFIER>
		| <TYPE_QUALIFIER_LIST> <TYPE_QUALIFIER>
		;

<PARAMETER_TYPE_LIST> ::= <PARAMETER_LIST>
		| <PARAMETER_LIST> COMMA ELLIPSIS
		;

<PARAMETER_LIST> ::= <PARAMETER_DECLARATION>
		| <PARAMETER_LIST> COMMA <PARAMETER_DECLARATION>
		;

<PARAMETER_DECLARATION> ::= <DECLARATION_SPECIFIERS> <DECLARATOR>
		| <DECLARATION_SPECIFIERS> <ABSTRACT_DECLARATOR>
		| <DECLARATION_SPECIFIERS>
		;

<IDENTIFIER_LIST> ::= IDENTIFIER
		| <IDENTIFIER_LIST> COMMA IDENTIFIER
		;

<TYPE_NAME> ::= <SPECIFIER_QUALIFIER_LIST>
		| <SPECIFIER_QUALIFIER_LIST> <ABSTRACT_DECLARATOR>
		;

<ABSTRACT_DECLARATOR> ::= <POINTER>
		| <DIRECT_ABSTRACT_DECLARATOR>
		| <POINTER> <DIRECT_ABSTRACT_DECLARATOR>
		;

<DIRECT_ABSTRACT_DECLARATOR> ::= P_OPEN <ABSTRACT_DECLARATOR> P_CLOSE
		| B_OPEN B_CLOSE
		| B_OPEN <CONSTANT_EXPRESSION> B_CLOSE
		| <DIRECT_ABSTRACT_DECLARATOR> B_OPEN B_CLOSE
		| <DIRECT_ABSTRACT_DECLARATOR> B_OPEN <CONSTANT_EXPRESSION> B_CLOSE
		| P_OPEN P_CLOSE
		| P_OPEN <PARAMETER_TYPE_LIST> P_CLOSE
		| <DIRECT_ABSTRACT_DECLARATOR> P_OPEN P_CLOSE
		| <DIRECT_ABSTRACT_DECLARATOR> P_OPEN <PARAMETER_TYPE_LIST> P_CLOSE
		;

<INITIALIZER> ::= <ASSIGNMENT_EXPRESSION>
		| BEGIN <INITIALIZER_LIST> END
		| BEGIN <INITIALIZER_LIST> COMMA END
		;

<INITIALIZER_LIST> ::= <INITIALIZER>
		| <INITIALIZER_LIST> COMMA <INITIALIZER>
		;

<STATEMENT> ::= <LABELED_STATEMENT>
		| <COMPOUND_STATEMENT>
		| <EXPRESSION_STATEMENT>
		| <SELECTION_STATEMENT>
		| <ITERATION_STATEMENT>
		| <JUMP_STATEMENT>
		;

<LABELED_STATEMENT> ::= IDENTIFIER COLUMN <STATEMENT>
		| CASE <CONSTANT_EXPRESSION> COLUMN <STATEMENT>
		| DEFAULT COLUMN <STATEMENT>
		;

<COMPOUND_STATEMENT> ::= BEGIN END
		| BEGIN <STATEMENT_LIST> END
		| BEGIN <DECLARATION_LIST> END
		| BEGIN <DECLARATION_LIST> <STATEMENT_LIST> END
		;

<DECLARATION_LIST> ::= <DECLARATION>
		| <DECLARATION_LIST> <DECLARATION>
		;

<STATEMENT_LIST> ::= <STATEMENT>
		| <STATEMENT_LIST> <STATEMENT>
		;

<EXPRESSION_STATEMENT> ::= INST_END
		| <EXPRESSION> INST_END
		;

<SELECTION_STATEMENT> ::= IF P_OPEN <EXPRESSION> P_CLOSE <STATEMENT>
		| IF P_OPEN <EXPRESSION> P_CLOSE <STATEMENT> ELSE <STATEMENT>
		| SWITCH P_OPEN <EXPRESSION> P_CLOSE <STATEMENT>
		;

<ITERATION_STATEMENT> ::= WHILE P_OPEN <EXPRESSION> P_CLOSE <STATEMENT>
		| DO <STATEMENT> WHILE P_OPEN <EXPRESSION> P_CLOSE INST_END
		| FOR P_OPEN <EXPRESSION_STATEMENT> <EXPRESSION_STATEMENT> P_CLOSE <STATEMENT>
		| FOR P_OPEN <EXPRESSION_STATEMENT> <EXPRESSION_STATEMENT> <EXPRESSION> P_CLOSE <STATEMENT>
		;

<JUMP_STATEMENT> ::= GOTO IDENTIFIER INST_END
		| CONTINUE INST_END
		| BREAK INST_END
		| RETURN INST_END
		| RETURN <EXPRESSION> INST_END
		;

<EXTERNAL_DECLARATION> ::= <FUNCTION_DEFINITION>
		| <DECLARATION>
		;

<FUNCTION_DEFINITION> ::= <DECLARATION_SPECIFIERS> <DECLARATOR> <DECLARATION_LIST> <COMPOUND_STATEMENT>
		| <DECLARATION_SPECIFIERS> <DECLARATOR> <COMPOUND_STATEMENT>
		| <DECLARATOR> <DECLARATION_LIST> <COMPOUND_STATEMENT>
		| <DECLARATOR> <COMPOUND_STATEMENT>
		;
