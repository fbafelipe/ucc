ignore <COMMENT> ::= "(/\*([^\*]|(\*+[^\*/]))*\*+/)|(//[^\n]*)";

ignore <DIRECTIVE_CONTINUE> ::= "\\\n";

<DIRECTIVE_END> ::= "\n";

<DEFINE> ::= "#[ \t]*define";
<DEFINED> ::= "defined";
<DEFINED_M> ::= "defined\(";
<UNDEF> ::= "#[ \t]*undef";
<INCLUDE> ::= "#[ \t]*include";
<IF> ::= "#[ \t]*if";
<IFDEF> ::= "#[ \t]*ifdef";
<IFNDEF> ::= "#[ \t]*ifndef";
<ELSE> ::= "#[ \t]*else";
<ELIF> ::= "#[ \t]*elif";
<ENDIF> ::= "#[ \t]*endif";

<LINE> ::= "#[ \t]*line";
<ERROR> ::= "#[ \t]*error";
<WARNING> ::= "#[ \t]*warning";
<PRAGMA> ::= "#[ \t]*pragma";

<IDENTIFIER> ::= "\w(\w|\d)*";

/*
 * MACRO is a workaround becouse in the expression
 * #define a (b) c
 * if there is a whitespace between a and (b), it is a ordinary define
 * if there is no whitespace, then it's a macro,
 * as our lexer ignores whitespaces, we define the token MACRO
 * that is an identifier with a '(' in the end
*/
<MACRO> ::= "\w(\w|\d)*\(";

<CONSTANT> ::= "0[xX](\h|\H)+(u|U|l|L)?";
<CONSTANT> ::= "\d+(u|U|l|L)?";
<CONSTANT> ::= "\'([^\\\']|\\.)+\'";

<CONSTANT> ::= "\d+[eE][\+-]?\d+(f|F|l|L)?";
<CONSTANT> ::= "\d+\.\d*([eE][\+-]?)?\d+(f|F|l|L)?";
<CONSTANT> ::= "\d*\.\d+([eE][\+-]?)?\d+(f|F|l|L)?";

<STRING_LITERAL> ::= "\"([^\\\"]|\\.)*\"";

<ELLIPSIS> ::= "\.\.\.";
<RIGHT_ASSIGN> ::= ">>=";
<LEFT_ASSIGN> ::= "<<=";
<ADD_ASSIGN> ::= "\+=";
<SUB_ASSIGN> ::= "-=";
<MUL_ASSIGN> ::= "\*=";
<DIV_ASSIGN> ::= "/=";
<MOD_ASSIGN> ::= "%=";
<AND_ASSIGN> ::= "&=";
<XOR_ASSIGN> ::= "\^=";
<OR_ASSIGN> ::= "\|=";

<RIGHT_OP> ::= ">>";
<LEFT_OP> ::= "<<";
<INC_OP> ::= "\+\+";
<DEC_OP> ::= "--";
<PTR_OP> ::= "->";
<AND_OP> ::= "&&";
<OR_OP> ::= "\|\|";
<LE_OP> ::= "<=";
<GE_OP> ::= ">=";
<EQ_OP> ::= "==";
<NE_OP> ::= "!=";

<INST_END> ::= ";";
<BEGIN> ::= "{";
<END> ::= "}";
<COMMA> ::= ",";
<COLUMN> ::= ":";
<EQ> ::= "=";
<P_OPEN> ::= "\(";
<P_CLOSE> ::= "\)";
<B_OPEN> ::= "\[|<:";
<B_CLOSE> ::= "\]|:>";
<DOT> ::= "\.";
<AND> ::= "&";
<NOT> ::= "!";
<NEG> ::= "~";
<LESS_SIG> ::= "-";
<PLUS_SIG> ::= "\+";
<MUL> ::= "\*";
<DIV> ::= "/";
<MOD> ::= "%";
<LESS> ::= "<";
<GREATER> ::= ">";
<XOR> ::= "\^";
<OR> ::= "\|";
<QUESTION> ::= "\?";
<SHARP_SHARP> ::= "##";
<SHARP> ::= "#";

ignore <WHITESPCE> ::= "[ \t\f\r]+";

// the TEXT and FILENAME_SYSTEM will be generated by PreprocessorScanner.
// define it's regex to be never used here
<TEXT> ::= " ";
<FILENAME_SYSTEM> ::= " ";
